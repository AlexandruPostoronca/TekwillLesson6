type: edu
custom_name: Symmetric matrix
files:
  - name: src/Main.java
    visible: true
    text: |-
      class Main {
          public static void main(String[] args) {
              // put your code here
          }
      }
    learner_created: false
  - name: test/MainTest.java
    visible: false
    text: |-
      import org.junit.After;
      import org.junit.Before;
      import org.junit.Test;
      
      import java.io.ByteArrayInputStream;
      import java.io.ByteArrayOutputStream;
      import java.io.PrintStream;
      
      import static org.junit.Assert.assertEquals;
      
      public class MainTest {
          private final PrintStream standardOut = System.out;
          private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();
      
          @Before
          public void setUp() {
              System.setOut(new PrintStream(outputStreamCaptor));
          }
      
          @After
          public void tearDown() {
              System.setOut(standardOut);
          }
      
          @Test
          public void testFromProblem() {
              simpleTest("3\n0 1 2\n1 2 3\n2 3 4", "YES"); // Provided test case
          }
      
          @Test
          public void test1() {
              simpleTest("1\n0", "YES"); // Minimum input (n=1)
          }
      
          @Test
          public void test2() {
              simpleTest("10\n0 1 2 3 4 5 6 7 8 9\n1 0 1 2 3 4 5 6 7 8\n2 1 0 1 2 3 4 5 6 7\n3 2 1 0 1 2 3 4 5 6\n" +
                         "4 3 2 1 0 1 2 3 4 5\n5 4 3 2 1 0 1 2 3 4\n6 5 4 3 2 1 0 1 2 3\n7 6 5 4 3 2 1 0 1 2\n" +
                         "8 7 6 5 4 3 2 1 0 1\n9 8 7 6 5 4 3 2 1 0", "YES"); // Maximum input (n=10), symmetric matrix
          }
      
          @Test
          public void test3() {
              simpleTest("3\n1 2 3\n4 5 6\n7 8 9", "NO"); // Non-symmetric matrix
          }
      
          @Test
          public void test4() {
              simpleTest("2\n0 1\n1 0", "YES"); // Symmetric matrix
          }
      
          @Test
          public void test5() {
              simpleTest("4\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7", "YES"); // Non-symmetric matrix
          }
      
          @Test
          public void test6() {
              simpleTest("2\n0 1\n1 2", "YES"); // Non-symmetric matrix, smallest possible input for non-symmetric matrix
          }
      
          @Test
          public void test7() {
              simpleTest("10\n0 1 2 3 4 5 6 7 8 9\n1 0 1 2 3 4 5 6 7 8\n2 1 0 1 2 3 4 5 6 7\n3 2 1 0 1 2 3 4 5 6\n" +
                         "4 3 2 1 0 1 2 3 4 5\n5 4 3 2 1 0 1 2 3 4\n6 5 4 3 2 1 0 1 2 3\n7 6 5 4 3 2 1 0 1 9\n" +
                         "8 7 6 5 4 3 2 1 9 0\n9 8 7 6 5 4 3 9 1 2", "NO"); // Non-symmetric matrix, maximum input (n=10)
          }
      
          @Test
          public void test8() {
              simpleTest("1\n1", "YES"); // Symmetric matrix, the smallest possible input for symmetric matrix
          }
      
          @Test
          public void test9() {
              simpleTest("4\n1 0 0 0\n0 1 0 0\n0 0 1 0\n0 0 0 1", "YES"); // Symmetric matrix, diagonal matrix
          }
      
          private void simpleTest(String in, String expected) {
              //Set input stream
              System.setIn(new ByteArrayInputStream(in.getBytes()));
      
              Main.main(new String[]{""});
              //Get the result
              String result = outputStreamCaptor.toString().trim();
      
              //Check the result
              String message = "For input:\r\n" + in + "\r\nThe output must be:\r\n" + expected + "\r\nActual output:\r\n" + result;
              assertEquals(message, expected, result);
          }
      
      }
    learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 25 Mar 2024 17:15:29 UTC"
record: -1
